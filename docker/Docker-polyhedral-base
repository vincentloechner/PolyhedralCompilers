# Polyhedral docker, base Ubuntu 20.04, all necessary packages

# build polyhedral base with:
#   docker build -f Docker-polyhedral-base . -t polyhedral-base
# then build polyhedral-compilers on top of this one.
FROM ubuntu:20.04

ARG name="polyhedral-base"
ARG maintainer="loechner@unistra.fr"
ARG description="linux, compilers, libs, utils and Python dependencies of Polyhedral"

LABEL name=${name} \
      maintainer=${maintainer} \
      description=${description}

ENV POLYHEDRAL_DIR="/usr/local/lib/polyhedral"
ENV LD_LIBRARY_PATH=""

ARG DEBIAN_FRONTEND=noninteractive

# Essential packages
RUN apt-get update && apt-get install apt-utils && apt-get -y install --assume-yes \
    tzdata \
    autoconf \
    bison \
    build-essential \
    clang-9 \
    libclang-9-dev \
    flex \
    git \
    libgmp-dev \
    libtool \
    ninja-build \
    pkg-config \
    texinfo \
    texlive-full \
    vim

# Change default compilers to make Pluto happy (not necessary??)
# RUN update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-9 100 \
#     && update-alternatives --install /usr/bin/FileCheck FileCheck /usr/bin/FileCheck-9 100 \
#     && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100 \
#     && update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 100

# Install packages for polyhedral
RUN export DEBIAN_FRONTEND="noninteractive" \
    && apt update && apt install -y --no-install-recommends \
        linux-tools-common \
        linux-tools-generic \
        linux-base \
        texlive \
        texlive-latex-base \
        bc \
        ca-certificates \
        curl \
        dpkg-dev \
        file \
        g++ \
        gengetopt \
        gfortran \
        git \
        libfftw3-dev \
        libgomp1 \
        make \
        pkg-config \
        python3 \
        python3-distutils \
        ssh \
        valgrind \
        zlib1g-dev \
        libjpeg-dev \
        ninja-build \
        ccache \
        binutils-gold \
        wget \
        gdb \
        autoconf automake autotools-dev libgmp-dev libtool flex bison pkg-config libgmp-dev libyaml-dev \
        gcc perl doxygen texinfo texlive-latex-extra rsync \
        lld \
        libboost-all-dev ghostscript iputils-ping \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Python3 packages
RUN export DEBIAN_FRONTEND="noninteractive" && \
    apt update && apt install -y --no-install-recommends \
        libhdf5-dev \
        python3 \
        python3-dev \
        python3-pip \
        python3-setuptools \
        python3-tk \
        python3-wheel \
        python-is-python3 \
    && pip3 install --upgrade pip \
    && pip install --no-cache-dir \
        matplotlib \
        numpy \
        pandas \
        scipy \
        tables \
        pybind11>=2.8.0 \
        PyYAML \
        dataclasses \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Download and install updated CMake, because many packages need a recent
# version (not available in ubuntu20).
# depending on your arch, will download and install:
# cmake-3.23.2-linux-x86_64.tar.gz
# cmake-3.23.2-linux-aarch64.tar.gz
# cmake-3.23.2-linux-[...].tar.gz
WORKDIR /usr/local
RUN PROCESSOR_ARCH=$(uname -m) \
    && CMAKE_FILE="https://github.com/Kitware/CMake/releases/download/v3.23.2/cmake-3.23.2-linux-${PROCESSOR_ARCH}.tar.gz" \
    && wget -qO- ${CMAKE_FILE} | tar xz --one-top-level=/usr/local/cmake --strip-components 1
ENV PATH="/usr/local/cmake/bin:${PATH}"

